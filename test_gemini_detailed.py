import os
import google.generativeai as genai
from dotenv import load_dotenv
import requests

load_dotenv()


def test_api_key_directly():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö API Key ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Google API"""
    api_key = os.getenv("GEMINI_API_KEY")
    if not api_key:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö GEMINI_API_KEY")
        return False

    print(f"üîë API Key: {api_key[:10]}...")
    print(f"üìè ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß: {len(api_key)}")

    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö Google API ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key={api_key}"
    headers = {"Content-Type": "application/json"}
    data = {"contents": [{"parts": [{"text": "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö"}]}]}

    try:
        response = requests.post(url, headers=headers, json=data, timeout=10)
        print(f"üì° HTTP Status: {response.status_code}")

        if response.status_code == 200:
            print("‚úÖ API Key ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ!")
            result = response.json()
            if "candidates" in result:
                print(
                    f"üí¨ ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö: {result['candidates'][0]['content']['parts'][0]['text']}"
                )
            return True
        else:
            print(f"‚ùå API Error: {response.text}")
            return False

    except Exception as e:
        print(f"‚ùå Network Error: {e}")
        return False


def test_generativeai_library():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö google-generativeai library"""
    api_key = os.getenv("GEMINI_API_KEY")
    if not api_key:
        return False

    try:
        genai.configure(api_key=api_key)
        model = genai.GenerativeModel("gemini-pro")
        response = model.generate_content("‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö")
        print("‚úÖ google-generativeai library ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ!")
        print(f"üí¨ ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö: {response.text}")
        return True
    except Exception as e:
        print(f"‚ùå Library Error: {e}")
        return False


if __name__ == "__main__":
    print("=== ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Gemini API ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ===\n")

    print("1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API Key ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á:")
    direct_test = test_api_key_directly()

    print("\n2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö google-generativeai library:")
    library_test = test_generativeai_library()

    print("\n=== ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏• ===")
    if direct_test and library_test:
        print("‚úÖ ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥")
    elif direct_test and not library_test:
        print("‚ö†Ô∏è API Key ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà library ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤")
    elif not direct_test and library_test:
        print("‚ö†Ô∏è Library ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà API Key ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤")
    else:
        print("‚ùå ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤")
        print("\n=== ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ===")
        print("1. ‡∏™‡∏£‡πâ‡∏≤‡∏á API Key ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å https://makersuite.google.com/app/apikey")
        print("2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Generative Language API ‡πÅ‡∏•‡πâ‡∏ß")
        print("3. ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Google ‡∏≠‡∏∑‡πà‡∏ô")
        print("4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Key ‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå")
