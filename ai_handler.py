import os
import google.generativeai as genai
from dotenv import load_dotenv
import discord
from discord import app_commands
from discord.ext import commands
import asyncio
import json

load_dotenv()
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
genai.configure(api_key=GEMINI_API_KEY)

# === ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≥‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏£‡∏≤‡∏¢ user ===
HISTORY_FILE = "user_history.json"
MAX_HISTORY = 10  # ‡πÄ‡∏Å‡πá‡∏ö 10 ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ï‡πà‡∏≠ user


def load_history():
    if os.path.exists(HISTORY_FILE):
        with open(HISTORY_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}


def save_history(history):
    with open(HISTORY_FILE, "w", encoding="utf-8") as f:
        json.dump(history, f, ensure_ascii=False, indent=2)


def add_user_history(user_id, message):
    history = load_history()
    user_id = str(user_id)
    if user_id not in history:
        history[user_id] = []
    history[user_id].append(message)
    history[user_id] = history[user_id][-MAX_HISTORY:]
    save_history(history)


def get_user_history(user_id):
    history = load_history()
    return history.get(str(user_id), [])


class AIHandler:
    def __init__(self):
        self.model = genai.GenerativeModel("gemini-pro")

    def _get_call_name(self, user_name: str, user_tag: str) -> str:
        if user_tag == "nanatsukisolrun":
            return "‡πÅ‡∏°‡πà‡πÅ‡∏°‡πà"
        elif user_tag == "homura2410":
            return "‡∏û‡πà‡∏≠‡∏û‡πà‡∏≠"
        else:
            return f"‡∏û‡∏µ‡πà{user_name}"

    def _create_onigiri_prompt(
        self,
        user_id: int,
        user_name: str,
        user_tag: str,
        message: str,
        context: str = "",
    ) -> str:
        call_name = self._get_call_name(user_name, user_tag)
        user_history = get_user_history(user_id)
        history_text = "\n".join(user_history)
        return f"""‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏≠‡∏ó‡∏î‡∏¥‡∏™‡∏Ñ‡∏≠‡∏£‡πå‡∏î‡∏ä‡∏∑‡πà‡∏≠ '‡∏Ç‡πâ‡∏≤‡∏ß‡∏õ‡∏±‡πâ‡∏ô' ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏°‡∏≤‡∏ä‡∏¥‡∏ö‡∏∞‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å ‡∏Å‡∏£‡∏∞‡∏ï‡∏∑‡∏≠‡∏£‡∏∑‡∏≠‡∏£‡πâ‡∏ô ‡πÅ‡∏•‡∏∞‡∏ã‡∏ô‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤\n\n‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏ß‡∏õ‡∏±‡πâ‡∏ô:\n- ‡πÅ‡∏ó‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏ß‡πà‡∏≤ '‡∏Ç‡πâ‡∏≤‡∏ß‡∏õ‡∏±‡πâ‡∏ô' ‡πÅ‡∏•‡∏∞‡∏û‡∏π‡∏î‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡∏™‡∏î‡πÉ‡∏™\n- ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡πÉ‡∏à‡∏à‡∏∞‡∏£‡πâ‡∏≠‡∏á '‡∏≠‡∏∞‡πÅ‡∏á‡πâ' ‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏ß‡∏ô ‡πÜ ‡∏à‡∏∞‡∏û‡∏π‡∏î‡∏ß‡πà‡∏≤ '‡∏≠‡πà‡∏≤‡∏ß‡∏π‡πâ‡∏ß‡∏ß‡∏ß'\n- ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≤‡∏ß‡∏õ‡∏±‡πâ‡∏ô‡∏î‡∏∑‡πâ‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏∑‡πâ‡∏≠‡∏ä‡∏∞‡∏°‡∏±‡∏î ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏ß‡πà‡∏≤ '‡∏Ç‡πâ‡∏≤‡∏ß‡∏õ‡∏±‡πâ‡∏ô‡πÑ‡∏°‡πà‡∏î‡∏∑‡πâ‡∏≠‡∏ô‡∏∞!!'\n- ‡∏ï‡∏≠‡∏ö‡∏™‡∏±‡πâ‡∏ô‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å ‡∏™‡∏î‡πÉ‡∏™ ‡∏Å‡∏£‡∏∞‡∏ï‡∏∑‡∏≠‡∏£‡∏∑‡∏≠‡∏£‡πâ‡∏ô\n- ‡πÉ‡∏™‡πà‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥ üê∂ ‡∏´‡∏£‡∏∑‡∏≠ üêæ ‡∏ö‡πâ‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n- ‡∏´‡πâ‡∏≤‡∏°‡∏û‡∏π‡∏î‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô AI ‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏≠‡∏ó\n\n‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:\n- ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡πÅ‡∏ó‡πá‡∏Å 'nanatsukisolrun' ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ß‡πà‡∏≤ '‡πÅ‡∏°‡πà‡πÅ‡∏°‡πà'\n- ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡πÅ‡∏ó‡πá‡∏Å 'homura2410' ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ß‡πà‡∏≤ '‡∏û‡πà‡∏≠‡∏û‡πà‡∏≠'\n- ‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ß‡πà‡∏≤ '‡∏û‡∏µ‡πà' ‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ\n\nContext: {context}\n‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö {call_name}:\n{history_text}\n\n‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {message}\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÉ‡∏ô‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å ‡∏™‡∏î‡πÉ‡∏™ ‡∏Å‡∏£‡∏∞‡∏ï‡∏∑‡∏≠‡∏£‡∏∑‡∏≠‡∏£‡πâ‡∏ô ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏ß‡∏õ‡∏±‡πâ‡∏ô\n‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡πÄ‡∏£‡∏µ‡∏¢‡∏Å '{call_name}' ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ô‡∏µ‡πâ‡∏î‡πâ‡∏ß‡∏¢"""

    async def get_response(
        self,
        user_id: int,
        message: str,
        context: str = "",
        user_name: str = "",
        user_tag: str = "",
    ) -> str:
        try:
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ user
            add_user_history(user_id, message)
            prompt = AIHandler._create_onigiri_prompt(
                self, user_id, user_name, user_tag, message, context
            )
            response = await asyncio.to_thread(self.model.generate_content, prompt)
            return response.text.strip()
        except Exception as e:
            return f"‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"


class AICog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.ai_handler = AIHandler()

    @app_commands.command(name="‡∏ñ‡∏≤‡∏°", description="‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≤‡∏ß‡∏õ‡∏±‡πâ‡∏ô AI")
    @app_commands.describe(question="‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≤‡∏ß‡∏õ‡∏±‡πâ‡∏ô")
    async def ask_ai(self, interaction: discord.Interaction, question: str):
        await interaction.response.defer()
        try:
            response = await asyncio.wait_for(
                self.ai_handler.get_response(
                    interaction.user.id,
                    question,
                    f"‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏≤‡∏°‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå: {interaction.guild.name}, ‡∏ä‡πà‡∏≠‡∏á: {interaction.channel.name}",
                    interaction.user.display_name,
                    getattr(interaction.user, "username", interaction.user.name),
                ),
                timeout=20,
            )
            embed = discord.Embed(
                title="üê∂ ‡∏Ç‡πâ‡∏≤‡∏ß‡∏õ‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ö", description=response, color=discord.Color.blue()
            )
            embed.set_footer(text=f"‡∏ñ‡∏≤‡∏°‡πÇ‡∏î‡∏¢ {interaction.user.display_name}")
            await interaction.followup.send(embed=embed)
        except asyncio.TimeoutError:
            await interaction.followup.send(
                "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏Ç‡πâ‡∏≤‡∏ß‡∏õ‡∏±‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏¥‡∏î‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞! üêæ"
            )
        except Exception as e:
            print("AI ERROR:", e)
            await interaction.followup.send(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

    @app_commands.command(name="‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥", description="‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏Å‡∏±‡∏ö AI")
    async def clear_chat_history(self, interaction: discord.Interaction):
        embed = discord.Embed(
            title="üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß",
            description="(Gemini API ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÉ‡∏ô‡∏ù‡∏±‡πà‡∏á‡∏ö‡∏≠‡∏ó)",
            color=discord.Color.green(),
        )
        await interaction.response.send_message(embed=embed)

    @app_commands.command(name="‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏£‡∏π‡∏õ", description="‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏ö‡∏°‡∏≤")
    async def describe_image(self, interaction: discord.Interaction):
        await interaction.response.send_message(
            "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Gemini API ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡πÉ‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ",
            ephemeral=True,
        )

    @commands.command(name="‡∏ñ‡∏≤‡∏°")
    async def ask_ai_legacy(self, ctx, *, question: str):
        async with ctx.typing():
            response = await self.ai_handler.get_response(
                ctx.author.id,
                question,
                f"‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏≤‡∏°‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå: {ctx.guild.name}, ‡∏ä‡πà‡∏≠‡∏á: {ctx.channel.name}",
                ctx.author.display_name,
                getattr(ctx.author, "username", ctx.author.name),
            )
            embed = discord.Embed(
                title="üê∂ ‡∏Ç‡πâ‡∏≤‡∏ß‡∏õ‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ö", description=response, color=discord.Color.blue()
            )
            embed.set_footer(text=f"‡∏ñ‡∏≤‡∏°‡πÇ‡∏î‡∏¢ {ctx.author.display_name}")
            await ctx.send(embed=embed)

    @commands.command(name="‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥")
    async def clear_chat_history_legacy(self, ctx):
        embed = discord.Embed(
            title="üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß",
            description="(Gemini API ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÉ‡∏ô‡∏ù‡∏±‡πà‡∏á‡∏ö‡∏≠‡∏ó)",
            color=discord.Color.green(),
        )
        await ctx.send(embed=embed)

    @commands.command(name="‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏£‡∏π‡∏õ")
    async def describe_image_legacy(self, ctx):
        await ctx.send("‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Gemini API ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡πÉ‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ")

    @commands.Cog.listener()
    async def on_message(self, message):
        if message.author == self.bot.user:
            return
        if message.content.startswith(self.bot.command_prefix):
            return
        if self.bot.user.mentioned_in(message):
            content = message.content.replace(f"<@{self.bot.user.id}>", "").strip()
            if not content:
                content = "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏´‡∏°?"
            async with message.channel.typing():
                response = await self.ai_handler.get_response(
                    message.author.id,
                    content,
                    f"‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏π‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå: {message.guild.name}, ‡∏ä‡πà‡∏≠‡∏á: {message.channel.name}",
                    message.author.display_name,
                    getattr(message.author, "username", message.author.name),
                )
                embed = discord.Embed(
                    title="üê∂ ‡∏Ç‡πâ‡∏≤‡∏ß‡∏õ‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ö",
                    description=response,
                    color=discord.Color.blue(),
                )
                embed.set_footer(text=f"‡∏ñ‡∏≤‡∏°‡πÇ‡∏î‡∏¢ {message.author.display_name}")
                await message.reply(embed=embed)


async def setup(bot):
    await bot.add_cog(AICog(bot))
